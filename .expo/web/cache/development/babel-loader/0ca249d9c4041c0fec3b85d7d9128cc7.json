{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\wamp64\\\\nbcc-staff-react-native\\\\app\\\\screens\\\\AccountScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Screen from \"../components/screen\";\nimport Seperator from \"../components/Seperator\";\nimport colors from \"../config/colors\";\nimport userApi from \"../api/user\";\nimport session from \"../cache/userSession\";\n\nfunction AccountScreen(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var getUser = function getUser() {\n    var result, nameResult;\n    return _regeneratorRuntime.async(function getUser$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            email = session.getEmail();\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(userApi.getUserbyEmail(email));\n\n          case 3:\n            result = _context.sent;\n\n            if (result.ok) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", console.log(\"No User \" + email));\n\n          case 6:\n            nameResult = result.data[0][\"first_name\"];\n            return _context.abrupt(\"return\", setUser({\n              fname: nameResult\n            }));\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  getUser();\n  return React.createElement(Screen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  }, \"Your User Account\"), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }\n  }), React.createElement(Seperator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 24\n    }\n  }), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 37\n    }\n  }), React.createElement(Text, {\n    style: styles.mainText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }\n  }, \"Name: \", user.fname, \" \"), React.createElement(Text, {\n    style: styles.mainText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }, \"Email: \", session.getEmail()), React.createElement(Text, {\n    style: styles.mainText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }\n  }, \"Phone: \")));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 20\n  },\n  heading: {\n    fontSize: 30,\n    fontWeight: \"bold\",\n    color: colors.green,\n    marginTop: 25,\n    marginLeft: 50\n  },\n  mainText: {\n    padding: 10,\n    fontSize: 20,\n    textAlign: \"left\"\n  }\n});\nexport default AccountScreen;","map":{"version":3,"sources":["C:/wamp64/nbcc-staff-react-native/app/screens/AccountScreen.js"],"names":["React","useEffect","useState","Screen","Seperator","colors","userApi","session","AccountScreen","props","user","setUser","getUser","email","getEmail","getUserbyEmail","result","ok","console","log","nameResult","data","fname","styles","container","heading","mainText","StyleSheet","create","paddingHorizontal","fontSize","fontWeight","color","green","marginTop","marginLeft","padding","textAlign"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;AAGA,OAAOC,MAAP;AACA,OAAOC,SAAP;AACA,OAAOC,MAAP;AACA,OAAOC,OAAP;AACA,OAAOC,OAAP;;AAGA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA,kBACJP,QAAQ,CAAC,EAAD,CADJ;AAAA;AAAA,MACrBQ,IADqB;AAAA,MACfC,OADe;;AAG5B,MAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AACdC,YAAAA,KAAK,GAAGN,OAAO,CAACO,QAAR,EAAR;AADc;AAAA,6CAEOR,OAAO,CAACS,cAAR,CAAuBF,KAAvB,CAFP;;AAAA;AAERG,YAAAA,MAFQ;;AAAA,gBAGTA,MAAM,CAACC,EAHE;AAAA;AAAA;AAAA;;AAAA,6CAGSC,OAAO,CAACC,GAAR,CAAY,aAAaN,KAAzB,CAHT;;AAAA;AAIVO,YAAAA,UAJU,GAIGJ,MAAM,CAACK,IAAP,CAAY,CAAZ,EAAe,YAAf,CAJH;AAAA,6CAKPV,OAAO,CAAC;AACbW,cAAAA,KAAK,EAAEF;AADM,aAAD,CALA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAWAR,EAAAA,OAAO;AACL,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEW,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAED,MAAM,CAACE,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAEe,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFf,EAE4B,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAF5B,EAGE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEF,MAAM,CAACG,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAqChB,IAAI,CAACY,KAA1C,MAHF,EAIE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACG,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAsCnB,OAAO,CAACO,QAAR,EAAtC,CAJF,EAKE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAES,MAAM,CAACG,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eALF,CADF,CADF;AAWH;;AAED,IAAMH,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,iBAAiB,EAAE;AADV,GADoB;AAI/BJ,EAAAA,OAAO,EAAE;AACPK,IAAAA,QAAQ,EAAE,EADH;AAEPC,IAAAA,UAAU,EAAE,MAFL;AAGPC,IAAAA,KAAK,EAAE3B,MAAM,CAAC4B,KAHP;AAIPC,IAAAA,SAAS,EAAE,EAJJ;AAKPC,IAAAA,UAAU,EAAE;AALL,GAJsB;AAW/BT,EAAAA,QAAQ,EAAE;AACRU,IAAAA,OAAO,EAAE,EADD;AAERN,IAAAA,QAAQ,EAAE,EAFF;AAGRO,IAAAA,SAAS,EAAE;AAHH;AAXqB,CAAlB,CAAf;AAkBA,eAAe7B,aAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { View, StyleSheet, Text } from \"react-native\";\r\n\r\nimport Screen from \"../components/screen\";\r\nimport Seperator from \"../components/Seperator\";\r\nimport colors from \"../config/colors\";\r\nimport userApi from \"../api/user\";\r\nimport session from \"../cache/userSession\";\r\n\r\n\r\nfunction AccountScreen(props) {\r\n  const [user, setUser] = useState([]);\r\n\r\n  const getUser = async () => {\r\n    email = session.getEmail();\r\n    const result = await userApi.getUserbyEmail(email);\r\n    if (!result.ok) return console.log(\"No User \" + email);\r\n    let nameResult = result.data[0][\"first_name\"];\r\n    return setUser({\r\n      fname: nameResult,\r\n    });\r\n  };\r\n\r\n  \r\n  getUser();\r\n    return ( \r\n      <Screen>\r\n        <View style={styles.container}>\r\n          <Text style={styles.heading}>Your User Account</Text>\r\n          <Text></Text><Seperator /><Text></Text>\r\n          <Text style={styles.mainText}>Name: {user.fname} </Text>\r\n          <Text style={styles.mainText}>Email: {session.getEmail()}</Text>\r\n          <Text style={styles.mainText}>Phone: </Text>\r\n        </View>\r\n    </Screen>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    paddingHorizontal: 20,\r\n  },\r\n  heading: {\r\n    fontSize: 30,\r\n    fontWeight: \"bold\",\r\n    color: colors.green,\r\n    marginTop: 25,\r\n    marginLeft: 50,\r\n  },\r\n  mainText: {\r\n    padding: 10,\r\n    fontSize: 20,\r\n    textAlign: \"left\",\r\n  },\r\n});\r\n\r\nexport default AccountScreen;\r\n"]},"metadata":{},"sourceType":"module"}