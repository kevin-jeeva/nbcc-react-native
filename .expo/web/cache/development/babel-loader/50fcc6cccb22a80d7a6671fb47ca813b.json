{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\wamp64\\\\nbcc-staff-react-native\\\\app\\\\screens\\\\LoginScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport AppButton from \"../components/AppButton\";\nimport AppTextInput from \"../components/AppTextInput\";\nimport Screen from \"../components/screen\";\nimport AppText from \"../components/AppText\";\nimport colors from \"../config/colors\";\nimport userApi from \"../api/user\";\nimport { useContext } from \"react\";\nimport AuthContext from \"../AuthContext/context\";\nimport session from \"../cache/userSession\";\nvar validationSchema = Yup.object().shape({\n  email: Yup.string().required().email().label(\"Email\"),\n  password: Yup.string().required().label(\"Password\")\n});\n\nfunction LoginScreen(props) {\n  var _this = this;\n\n  var authContext = useContext(AuthContext);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loginFailed = _useState2[0],\n      setLoginFailed = _useState2[1];\n\n  var handleSubmit = function handleSubmit(_ref) {\n    var email, password, result, user;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            email = _ref.email, password = _ref.password;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(userApi.login(email, password));\n\n          case 3:\n            result = _context.sent;\n\n            if (result.ok) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", setLoginFailed(true));\n\n          case 6:\n            setLoginFailed(false);\n            user = result.data;\n            authContext.setUser(user);\n            session.setEmail(email);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Screen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, React.createElement(Image, {\n    style: styles.logo,\n    source: require(\"../../assets/nbcc.png\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }), React.createElement(Formik, {\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    onSubmit: handleSubmit,\n    validationSchema: validationSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, function (_ref2) {\n    var handleChange = _ref2.handleChange,\n        handleSubmit = _ref2.handleSubmit,\n        errors = _ref2.errors,\n        setFieldTouched = _ref2.setFieldTouched,\n        touched = _ref2.touched;\n    return React.createElement(React.Fragment, null, React.createElement(AppText, {\n      style: styles.error,\n      visible: loginFailed,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }\n    }, \"Invalid Email or Password\"), React.createElement(AppTextInput, {\n      placeholder: \"Enter Email\",\n      icon: \"email\",\n      autoCapitalize: \"none\",\n      autoCorrect: false,\n      keyboardType: \"email-address\",\n      textContentType: \"emailAddress\",\n      onBlur: function onBlur() {\n        return setFieldTouched(\"email\");\n      },\n      onChangeText: handleChange(\"email\"),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 15\n      }\n    }), React.createElement(AppText, {\n      style: styles.error,\n      visible: touched.email,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 15\n      }\n    }, errors.email), React.createElement(AppTextInput, {\n      placeholder: \"Enter Password\",\n      icon: \"lock\",\n      secureTextEntry: true,\n      textContentType: \"password\",\n      onChangeText: handleChange(\"password\"),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 15\n      }\n    }), React.createElement(AppText, {\n      style: styles.error,\n      visible: touched.password,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 15\n      }\n    }, errors.password), React.createElement(AppButton, {\n      sytle: styles.loginButton,\n      onPress: handleSubmit,\n      text: \"Login\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 15\n      }\n    }));\n  })));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 23\n  },\n  error: {\n    color: colors.error,\n    fontSize: 10,\n    alignSelf: \"flex-start\",\n    marginLeft: 10\n  },\n  loginButton: {\n    marginVertical: 30\n  },\n  logo: {\n    bottom: 60\n  }\n});\nexport default LoginScreen;","map":{"version":3,"sources":["C:/wamp64/nbcc-staff-react-native/app/screens/LoginScreen.js"],"names":["React","useState","AsyncStorage","Formik","Yup","AppButton","AppTextInput","Screen","AppText","colors","userApi","useContext","AuthContext","session","validationSchema","object","shape","email","string","required","label","password","LoginScreen","props","authContext","loginFailed","setLoginFailed","handleSubmit","login","result","ok","user","data","setUser","setEmail","styles","container","logo","require","handleChange","errors","setFieldTouched","touched","error","loginButton","StyleSheet","create","flex","alignItems","justifyContent","padding","color","fontSize","alignSelf","marginLeft","marginVertical","bottom"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { View, StyleSheet, Text, Image, AsyncStorage } from \"react-native\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport AppButton from \"../components/AppButton\";\r\nimport AppTextInput from \"../components/AppTextInput\";\r\nimport Screen from \"../components/screen\";\r\nimport AppText from \"../components/AppText\";\r\nimport colors from \"../config/colors\";\r\nimport userApi from \"../api/user\";\r\nimport { useContext } from \"react\";\r\nimport AuthContext from \"../AuthContext/context\";\r\nimport session from \"../cache/userSession\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  email: Yup.string().required().email().label(\"Email\"),\r\n  password: Yup.string().required().label(\"Password\"),\r\n});\r\n//LOGIN screen LOGIC\r\nfunction LoginScreen(props) {\r\n  const authContext = useContext(AuthContext);\r\n  const [loginFailed, setLoginFailed] = useState(false);\r\n\r\n  //check the email\r\n  const handleSubmit = async ({ email, password }) => {\r\n    const result = await userApi.login(email, password);\r\n    if (!result.ok) {\r\n      return setLoginFailed(true);\r\n    }\r\n    setLoginFailed(false);\r\n    const user = result.data;\r\n    authContext.setUser(user);\r\n    session.setEmail(email);\r\n  };\r\n\r\n  return (\r\n    <Screen>\r\n      <View style={styles.container}>\r\n        <Image style={styles.logo} source={require(\"../../assets/nbcc.png\")} />\r\n        <Formik\r\n          initialValues={{ email: \"\", password: \"\" }}\r\n          onSubmit={handleSubmit}\r\n          validationSchema={validationSchema}\r\n        >\r\n          {({\r\n            handleChange,\r\n            handleSubmit,\r\n            errors,\r\n            setFieldTouched,\r\n            touched,\r\n          }) => (\r\n            <>\r\n              <AppText style={styles.error} visible={loginFailed}>\r\n                {\"Invalid Email or Password\"}\r\n              </AppText>\r\n              <AppTextInput\r\n                placeholder=\"Enter Email\"\r\n                icon={\"email\"}\r\n                autoCapitalize=\"none\"\r\n                autoCorrect={false}\r\n                keyboardType=\"email-address\"\r\n                textContentType=\"emailAddress\"\r\n                onBlur={() => setFieldTouched(\"email\")}\r\n                onChangeText={handleChange(\"email\")}\r\n              />\r\n              <AppText style={styles.error} visible={touched.email}>\r\n                {errors.email}\r\n              </AppText>\r\n              <AppTextInput\r\n                placeholder=\"Enter Password\"\r\n                icon={\"lock\"}\r\n                secureTextEntry\r\n                textContentType=\"password\"\r\n                onChangeText={handleChange(\"password\")}\r\n              />\r\n              <AppText style={styles.error} visible={touched.password}>\r\n                {errors.password}\r\n              </AppText>\r\n              <AppButton\r\n                sytle={styles.loginButton}\r\n                onPress={handleSubmit}\r\n                text={\"Login\"}\r\n              ></AppButton>\r\n            </>\r\n          )}\r\n        </Formik>\r\n      </View>\r\n    </Screen>\r\n  );\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    padding: 23,\r\n  },\r\n  error: {\r\n    color: colors.error,\r\n    fontSize: 10,\r\n    alignSelf: \"flex-start\",\r\n    marginLeft: 10,\r\n  },\r\n  loginButton: {\r\n    marginVertical: 30,\r\n  },\r\n  logo: {\r\n    bottom: 60,\r\n  },\r\n});\r\n\r\nexport default LoginScreen;\r\n"]},"metadata":{},"sourceType":"module"}