{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar ErrorUtils = require(\"../vendor/core/ErrorUtils\");\n\nvar Systrace = require(\"../Performance/Systrace\");\n\nvar deepFreezeAndThrowOnMutationInDev = require(\"../Utilities/deepFreezeAndThrowOnMutationInDev\");\n\nvar invariant = require('invariant');\n\nvar stringifySafe = require(\"../Utilities/stringifySafe\").default;\n\nvar warnOnce = require(\"../Utilities/warnOnce\");\n\nvar TO_JS = 0;\nvar TO_NATIVE = 1;\nvar MODULE_IDS = 0;\nvar METHOD_IDS = 1;\nvar PARAMS = 2;\nvar MIN_TIME_BETWEEN_FLUSHES_MS = 5;\nvar TRACE_TAG_REACT_APPS = 1 << 17;\nvar DEBUG_INFO_LIMIT = 32;\n\nvar MessageQueue = function () {\n  function MessageQueue() {\n    _classCallCheck(this, MessageQueue);\n\n    this._lazyCallableModules = {};\n    this._queue = [[], [], [], 0];\n    this._successCallbacks = new Map();\n    this._failureCallbacks = new Map();\n    this._callID = 0;\n    this._lastFlush = 0;\n    this._eventLoopStartTime = Date.now();\n    this._immediatesCallback = null;\n\n    if (__DEV__) {\n      this._debugInfo = {};\n      this._remoteModuleTable = {};\n      this._remoteMethodTable = {};\n    }\n\n    this.callFunctionReturnFlushedQueue = this.callFunctionReturnFlushedQueue.bind(this);\n    this.flushedQueue = this.flushedQueue.bind(this);\n    this.invokeCallbackAndReturnFlushedQueue = this.invokeCallbackAndReturnFlushedQueue.bind(this);\n  }\n\n  _createClass(MessageQueue, [{\n    key: \"callFunctionReturnFlushedQueue\",\n    value: function callFunctionReturnFlushedQueue(module, method, args) {\n      var _this = this;\n\n      this.__guard(function () {\n        _this.__callFunction(module, method, args);\n      });\n\n      return this.flushedQueue();\n    }\n  }, {\n    key: \"callFunctionReturnResultAndFlushedQueue\",\n    value: function callFunctionReturnResultAndFlushedQueue(module, method, args) {}\n  }, {\n    key: \"invokeCallbackAndReturnFlushedQueue\",\n    value: function invokeCallbackAndReturnFlushedQueue(cbID, args) {\n      var _this2 = this;\n\n      this.__guard(function () {\n        _this2.__invokeCallback(cbID, args);\n      });\n\n      return this.flushedQueue();\n    }\n  }, {\n    key: \"flushedQueue\",\n    value: function flushedQueue() {\n      var _this3 = this;\n\n      this.__guard(function () {\n        _this3.__callImmediates();\n      });\n\n      var queue = this._queue;\n      this._queue = [[], [], [], this._callID];\n      return queue[0].length ? queue : null;\n    }\n  }, {\n    key: \"getEventLoopRunningTime\",\n    value: function getEventLoopRunningTime() {\n      return Date.now() - this._eventLoopStartTime;\n    }\n  }, {\n    key: \"registerCallableModule\",\n    value: function registerCallableModule(name, module) {\n      this._lazyCallableModules[name] = function () {\n        return module;\n      };\n    }\n  }, {\n    key: \"registerLazyCallableModule\",\n    value: function registerLazyCallableModule(name, factory) {\n      var module;\n      var getValue = factory;\n\n      this._lazyCallableModules[name] = function () {\n        if (getValue) {\n          module = getValue();\n          getValue = null;\n        }\n\n        return module;\n      };\n    }\n  }, {\n    key: \"getCallableModule\",\n    value: function getCallableModule(name) {\n      var getValue = this._lazyCallableModules[name];\n      return getValue ? getValue() : null;\n    }\n  }, {\n    key: \"callNativeSyncHook\",\n    value: function callNativeSyncHook(moduleID, methodID, params, onFail, onSucc) {\n      if (__DEV__) {\n        invariant(global.nativeCallSyncHook, 'Calling synchronous methods on native ' + 'modules is not supported in Chrome.\\n\\n Consider providing alternative ' + 'methods to expose this method in debug mode, e.g. by exposing constants ' + 'ahead-of-time.');\n      }\n\n      this.processCallbacks(moduleID, methodID, params, onFail, onSucc);\n      return global.nativeCallSyncHook(moduleID, methodID, params);\n    }\n  }, {\n    key: \"processCallbacks\",\n    value: function processCallbacks(moduleID, methodID, params, onFail, onSucc) {\n      var _this4 = this;\n\n      if (onFail || onSucc) {\n        if (__DEV__) {\n          this._debugInfo[this._callID] = [moduleID, methodID];\n\n          if (this._callID > DEBUG_INFO_LIMIT) {\n            delete this._debugInfo[this._callID - DEBUG_INFO_LIMIT];\n          }\n\n          if (this._successCallbacks.size > 500) {\n            var info = {};\n\n            this._successCallbacks.forEach(function (_, callID) {\n              var debug = _this4._debugInfo[callID];\n              var module = debug && _this4._remoteModuleTable[debug[0]];\n              var method = debug && _this4._remoteMethodTable[debug[0]][debug[1]];\n              info[callID] = {\n                module: module,\n                method: method\n              };\n            });\n\n            warnOnce('excessive-number-of-pending-callbacks', \"Please report: Excessive number of pending callbacks: \" + this._successCallbacks.size + \". Some pending callbacks that might have leaked by never being called from native code: \" + stringifySafe(info));\n          }\n        }\n\n        onFail && params.push(this._callID << 1);\n        onSucc && params.push(this._callID << 1 | 1);\n\n        this._successCallbacks.set(this._callID, onSucc);\n\n        this._failureCallbacks.set(this._callID, onFail);\n      }\n\n      if (__DEV__) {\n        global.nativeTraceBeginAsyncFlow && global.nativeTraceBeginAsyncFlow(TRACE_TAG_REACT_APPS, 'native', this._callID);\n      }\n\n      this._callID++;\n    }\n  }, {\n    key: \"enqueueNativeCall\",\n    value: function enqueueNativeCall(moduleID, methodID, params, onFail, onSucc) {\n      this.processCallbacks(moduleID, methodID, params, onFail, onSucc);\n\n      this._queue[MODULE_IDS].push(moduleID);\n\n      this._queue[METHOD_IDS].push(methodID);\n\n      if (__DEV__) {\n        var isValidArgument = function isValidArgument(val) {\n          var t = typeof val;\n\n          if (t === 'undefined' || t === 'null' || t === 'boolean' || t === 'string') {\n            return true;\n          }\n\n          if (t === 'number') {\n            return isFinite(val);\n          }\n\n          if (t === 'function' || t !== 'object') {\n            return false;\n          }\n\n          if (Array.isArray(val)) {\n            return val.every(isValidArgument);\n          }\n\n          for (var k in val) {\n            if (typeof val[k] !== 'function' && !isValidArgument(val[k])) {\n              return false;\n            }\n          }\n\n          return true;\n        };\n\n        var replacer = function replacer(key, val) {\n          var t = typeof val;\n\n          if (t === 'function') {\n            return '<<Function ' + val.name + '>>';\n          } else if (t === 'number' && !isFinite(val)) {\n            return '<<' + val.toString() + '>>';\n          } else {\n            return val;\n          }\n        };\n\n        invariant(isValidArgument(params), '%s is not usable as a native method argument', JSON.stringify(params, replacer));\n        deepFreezeAndThrowOnMutationInDev(params);\n      }\n\n      this._queue[PARAMS].push(params);\n\n      var now = Date.now();\n\n      if (global.nativeFlushQueueImmediate && now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS) {\n        var queue = this._queue;\n        this._queue = [[], [], [], this._callID];\n        this._lastFlush = now;\n        global.nativeFlushQueueImmediate(queue);\n      }\n\n      Systrace.counterEvent('pending_js_to_native_queue', this._queue[0].length);\n\n      if (__DEV__ && this.__spy && isFinite(moduleID)) {\n        this.__spy({\n          type: TO_NATIVE,\n          module: this._remoteModuleTable[moduleID],\n          method: this._remoteMethodTable[moduleID][methodID],\n          args: params\n        });\n      } else if (this.__spy) {\n        this.__spy({\n          type: TO_NATIVE,\n          module: moduleID + '',\n          method: methodID,\n          args: params\n        });\n      }\n    }\n  }, {\n    key: \"createDebugLookup\",\n    value: function createDebugLookup(moduleID, name, methods) {\n      if (__DEV__) {\n        this._remoteModuleTable[moduleID] = name;\n        this._remoteMethodTable[moduleID] = methods || [];\n      }\n    }\n  }, {\n    key: \"setImmediatesCallback\",\n    value: function setImmediatesCallback(fn) {\n      this._immediatesCallback = fn;\n    }\n  }, {\n    key: \"__guard\",\n    value: function __guard(fn) {\n      if (this.__shouldPauseOnThrow()) {\n        fn();\n      } else {\n        try {\n          fn();\n        } catch (error) {\n          ErrorUtils.reportFatalError(error);\n        }\n      }\n    }\n  }, {\n    key: \"__shouldPauseOnThrow\",\n    value: function __shouldPauseOnThrow() {\n      return typeof DebuggerInternal !== 'undefined' && DebuggerInternal.shouldPauseOnThrow === true;\n    }\n  }, {\n    key: \"__callImmediates\",\n    value: function __callImmediates() {\n      Systrace.beginEvent('JSTimers.callImmediates()');\n\n      if (this._immediatesCallback != null) {\n        this._immediatesCallback();\n      }\n\n      Systrace.endEvent();\n    }\n  }, {\n    key: \"__callFunction\",\n    value: function __callFunction(module, method, args) {\n      this._lastFlush = Date.now();\n      this._eventLoopStartTime = this._lastFlush;\n\n      if (__DEV__ || this.__spy) {\n        Systrace.beginEvent(module + \".\" + method + \"(\" + stringifySafe(args) + \")\");\n      } else {\n        Systrace.beginEvent(module + \".\" + method + \"(...)\");\n      }\n\n      if (this.__spy) {\n        this.__spy({\n          type: TO_JS,\n          module: module,\n          method: method,\n          args: args\n        });\n      }\n\n      var moduleMethods = this.getCallableModule(module);\n      invariant(!!moduleMethods, 'Module %s is not a registered callable module (calling %s)', module, method);\n      invariant(!!moduleMethods[method], 'Method %s does not exist on module %s', method, module);\n      moduleMethods[method].apply(moduleMethods, args);\n      Systrace.endEvent();\n    }\n  }, {\n    key: \"__invokeCallback\",\n    value: function __invokeCallback(cbID, args) {\n      this._lastFlush = Date.now();\n      this._eventLoopStartTime = this._lastFlush;\n      var callID = cbID >>> 1;\n      var isSuccess = cbID & 1;\n      var callback = isSuccess ? this._successCallbacks.get(callID) : this._failureCallbacks.get(callID);\n\n      if (__DEV__) {\n        var debug = this._debugInfo[callID];\n\n        var _module = debug && this._remoteModuleTable[debug[0]];\n\n        var method = debug && this._remoteMethodTable[debug[0]][debug[1]];\n        invariant(callback, \"No callback found with cbID \" + cbID + \" and callID \" + callID + \" for \" + (method ? \" \" + _module + \".\" + method + \" - most likely the callback was already invoked\" : \"module \" + (_module || '<unknown>')) + (\". Args: '\" + stringifySafe(args) + \"'\"));\n        var profileName = debug ? '<callback for ' + _module + '.' + method + '>' : cbID;\n\n        if (callback && this.__spy) {\n          this.__spy({\n            type: TO_JS,\n            module: null,\n            method: profileName,\n            args: args\n          });\n        }\n\n        Systrace.beginEvent(\"MessageQueue.invokeCallback(\" + profileName + \", \" + stringifySafe(args) + \")\");\n      }\n\n      if (!callback) {\n        return;\n      }\n\n      this._successCallbacks.delete(callID);\n\n      this._failureCallbacks.delete(callID);\n\n      callback.apply(void 0, _toConsumableArray(args));\n\n      if (__DEV__) {\n        Systrace.endEvent();\n      }\n    }\n  }], [{\n    key: \"spy\",\n    value: function spy(spyOrToggle) {\n      if (spyOrToggle === true) {\n        MessageQueue.prototype.__spy = function (info) {\n          console.log((info.type === TO_JS ? 'N->JS' : 'JS->N') + \" : \" + (\"\" + (info.module ? info.module + '.' : '') + info.method) + (\"(\" + JSON.stringify(info.args) + \")\"));\n        };\n      } else if (spyOrToggle === false) {\n        MessageQueue.prototype.__spy = null;\n      } else {\n        MessageQueue.prototype.__spy = spyOrToggle;\n      }\n    }\n  }]);\n\n  return MessageQueue;\n}();\n\nmodule.exports = MessageQueue;","map":{"version":3,"sources":["C:/wamp64/nbcc-staff-react-native/node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js"],"names":["ErrorUtils","require","Systrace","deepFreezeAndThrowOnMutationInDev","invariant","stringifySafe","default","warnOnce","TO_JS","TO_NATIVE","MODULE_IDS","METHOD_IDS","PARAMS","MIN_TIME_BETWEEN_FLUSHES_MS","TRACE_TAG_REACT_APPS","DEBUG_INFO_LIMIT","MessageQueue","_lazyCallableModules","_queue","_successCallbacks","Map","_failureCallbacks","_callID","_lastFlush","_eventLoopStartTime","Date","now","_immediatesCallback","__DEV__","_debugInfo","_remoteModuleTable","_remoteMethodTable","callFunctionReturnFlushedQueue","bind","flushedQueue","invokeCallbackAndReturnFlushedQueue","module","method","args","__guard","__callFunction","cbID","__invokeCallback","__callImmediates","queue","length","name","factory","getValue","moduleID","methodID","params","onFail","onSucc","global","nativeCallSyncHook","processCallbacks","size","info","forEach","_","callID","debug","push","set","nativeTraceBeginAsyncFlow","isValidArgument","val","t","isFinite","Array","isArray","every","k","replacer","key","toString","JSON","stringify","nativeFlushQueueImmediate","counterEvent","__spy","type","methods","fn","__shouldPauseOnThrow","error","reportFatalError","DebuggerInternal","shouldPauseOnThrow","beginEvent","endEvent","moduleMethods","getCallableModule","apply","isSuccess","callback","get","profileName","delete","spyOrToggle","prototype","console","log","exports"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n * @format\r\n */\r\n\r\n'use strict';\r\n\r\nconst ErrorUtils = require('../vendor/core/ErrorUtils');\r\nconst Systrace = require('../Performance/Systrace');\r\n\r\nconst deepFreezeAndThrowOnMutationInDev = require('../Utilities/deepFreezeAndThrowOnMutationInDev');\r\nconst invariant = require('invariant');\r\nconst stringifySafe = require('../Utilities/stringifySafe').default;\r\nconst warnOnce = require('../Utilities/warnOnce');\r\n\r\nexport type SpyData = {\r\n  type: number,\r\n  module: ?string,\r\n  method: string | number,\r\n  args: any[],\r\n  ...\r\n};\r\n\r\nconst TO_JS = 0;\r\nconst TO_NATIVE = 1;\r\n\r\nconst MODULE_IDS = 0;\r\nconst METHOD_IDS = 1;\r\nconst PARAMS = 2;\r\nconst MIN_TIME_BETWEEN_FLUSHES_MS = 5;\r\n\r\n// eslint-disable-next-line no-bitwise\r\nconst TRACE_TAG_REACT_APPS = 1 << 17;\r\n\r\nconst DEBUG_INFO_LIMIT = 32;\r\n\r\nclass MessageQueue {\r\n  _lazyCallableModules: {[key: string]: (void) => Object, ...};\r\n  _queue: [number[], number[], any[], number];\r\n  _successCallbacks: Map<number, ?Function>;\r\n  _failureCallbacks: Map<number, ?Function>;\r\n  _callID: number;\r\n  _lastFlush: number;\r\n  _eventLoopStartTime: number;\r\n  _immediatesCallback: ?() => void;\r\n\r\n  _debugInfo: {[number]: [number, number], ...};\r\n  _remoteModuleTable: {[number]: string, ...};\r\n  _remoteMethodTable: {[number]: $ReadOnlyArray<string>, ...};\r\n\r\n  __spy: ?(data: SpyData) => void;\r\n\r\n  constructor() {\r\n    this._lazyCallableModules = {};\r\n    this._queue = [[], [], [], 0];\r\n    this._successCallbacks = new Map();\r\n    this._failureCallbacks = new Map();\r\n    this._callID = 0;\r\n    this._lastFlush = 0;\r\n    this._eventLoopStartTime = Date.now();\r\n    this._immediatesCallback = null;\r\n\r\n    if (__DEV__) {\r\n      this._debugInfo = {};\r\n      this._remoteModuleTable = {};\r\n      this._remoteMethodTable = {};\r\n    }\r\n\r\n    (this: any).callFunctionReturnFlushedQueue = this.callFunctionReturnFlushedQueue.bind(\r\n      this,\r\n    );\r\n    (this: any).flushedQueue = this.flushedQueue.bind(this);\r\n    (this: any).invokeCallbackAndReturnFlushedQueue = this.invokeCallbackAndReturnFlushedQueue.bind(\r\n      this,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Public APIs\r\n   */\r\n\r\n  static spy(spyOrToggle: boolean | ((data: SpyData) => void)) {\r\n    if (spyOrToggle === true) {\r\n      MessageQueue.prototype.__spy = info => {\r\n        console.log(\r\n          `${info.type === TO_JS ? 'N->JS' : 'JS->N'} : ` +\r\n            `${info.module ? info.module + '.' : ''}${info.method}` +\r\n            `(${JSON.stringify(info.args)})`,\r\n        );\r\n      };\r\n    } else if (spyOrToggle === false) {\r\n      MessageQueue.prototype.__spy = null;\r\n    } else {\r\n      MessageQueue.prototype.__spy = spyOrToggle;\r\n    }\r\n  }\r\n\r\n  callFunctionReturnFlushedQueue(\r\n    module: string,\r\n    method: string,\r\n    args: any[],\r\n  ): null | [Array<number>, Array<number>, Array<any>, number] {\r\n    this.__guard(() => {\r\n      this.__callFunction(module, method, args);\r\n    });\r\n\r\n    return this.flushedQueue();\r\n  }\r\n\r\n  // Deprecated. T61834641: Remove me once native clients have updated\r\n  callFunctionReturnResultAndFlushedQueue(\r\n    module: string,\r\n    method: string,\r\n    args: any[],\r\n  ): void {}\r\n\r\n  invokeCallbackAndReturnFlushedQueue(\r\n    cbID: number,\r\n    args: any[],\r\n  ): null | [Array<number>, Array<number>, Array<any>, number] {\r\n    this.__guard(() => {\r\n      this.__invokeCallback(cbID, args);\r\n    });\r\n\r\n    return this.flushedQueue();\r\n  }\r\n\r\n  flushedQueue(): null | [Array<number>, Array<number>, Array<any>, number] {\r\n    this.__guard(() => {\r\n      this.__callImmediates();\r\n    });\r\n\r\n    const queue = this._queue;\r\n    this._queue = [[], [], [], this._callID];\r\n    return queue[0].length ? queue : null;\r\n  }\r\n\r\n  getEventLoopRunningTime(): number {\r\n    return Date.now() - this._eventLoopStartTime;\r\n  }\r\n\r\n  registerCallableModule(name: string, module: Object) {\r\n    this._lazyCallableModules[name] = () => module;\r\n  }\r\n\r\n  registerLazyCallableModule(name: string, factory: void => Object) {\r\n    let module: Object;\r\n    let getValue: ?(void) => Object = factory;\r\n    this._lazyCallableModules[name] = () => {\r\n      if (getValue) {\r\n        module = getValue();\r\n        getValue = null;\r\n      }\r\n      return module;\r\n    };\r\n  }\r\n\r\n  getCallableModule(name: string): any | null {\r\n    const getValue = this._lazyCallableModules[name];\r\n    return getValue ? getValue() : null;\r\n  }\r\n\r\n  callNativeSyncHook(\r\n    moduleID: number,\r\n    methodID: number,\r\n    params: any[],\r\n    onFail: ?Function,\r\n    onSucc: ?Function,\r\n  ): any {\r\n    if (__DEV__) {\r\n      invariant(\r\n        global.nativeCallSyncHook,\r\n        'Calling synchronous methods on native ' +\r\n          'modules is not supported in Chrome.\\n\\n Consider providing alternative ' +\r\n          'methods to expose this method in debug mode, e.g. by exposing constants ' +\r\n          'ahead-of-time.',\r\n      );\r\n    }\r\n    this.processCallbacks(moduleID, methodID, params, onFail, onSucc);\r\n    return global.nativeCallSyncHook(moduleID, methodID, params);\r\n  }\r\n\r\n  processCallbacks(\r\n    moduleID: number,\r\n    methodID: number,\r\n    params: any[],\r\n    onFail: ?Function,\r\n    onSucc: ?Function,\r\n  ) {\r\n    if (onFail || onSucc) {\r\n      if (__DEV__) {\r\n        this._debugInfo[this._callID] = [moduleID, methodID];\r\n        if (this._callID > DEBUG_INFO_LIMIT) {\r\n          delete this._debugInfo[this._callID - DEBUG_INFO_LIMIT];\r\n        }\r\n        if (this._successCallbacks.size > 500) {\r\n          const info = {};\r\n          this._successCallbacks.forEach((_, callID) => {\r\n            const debug = this._debugInfo[callID];\r\n            const module = debug && this._remoteModuleTable[debug[0]];\r\n            const method = debug && this._remoteMethodTable[debug[0]][debug[1]];\r\n            info[callID] = {module, method};\r\n          });\r\n          warnOnce(\r\n            'excessive-number-of-pending-callbacks',\r\n            `Please report: Excessive number of pending callbacks: ${\r\n              this._successCallbacks.size\r\n            }. Some pending callbacks that might have leaked by never being called from native code: ${stringifySafe(\r\n              info,\r\n            )}`,\r\n          );\r\n        }\r\n      }\r\n      // Encode callIDs into pairs of callback identifiers by shifting left and using the rightmost bit\r\n      // to indicate fail (0) or success (1)\r\n      // eslint-disable-next-line no-bitwise\r\n      onFail && params.push(this._callID << 1);\r\n      // eslint-disable-next-line no-bitwise\r\n      onSucc && params.push((this._callID << 1) | 1);\r\n      this._successCallbacks.set(this._callID, onSucc);\r\n      this._failureCallbacks.set(this._callID, onFail);\r\n    }\r\n    if (__DEV__) {\r\n      global.nativeTraceBeginAsyncFlow &&\r\n        global.nativeTraceBeginAsyncFlow(\r\n          TRACE_TAG_REACT_APPS,\r\n          'native',\r\n          this._callID,\r\n        );\r\n    }\r\n    this._callID++;\r\n  }\r\n\r\n  enqueueNativeCall(\r\n    moduleID: number,\r\n    methodID: number,\r\n    params: any[],\r\n    onFail: ?Function,\r\n    onSucc: ?Function,\r\n  ) {\r\n    this.processCallbacks(moduleID, methodID, params, onFail, onSucc);\r\n\r\n    this._queue[MODULE_IDS].push(moduleID);\r\n    this._queue[METHOD_IDS].push(methodID);\r\n\r\n    if (__DEV__) {\r\n      // Validate that parameters passed over the bridge are\r\n      // folly-convertible.  As a special case, if a prop value is a\r\n      // function it is permitted here, and special-cased in the\r\n      // conversion.\r\n      const isValidArgument = val => {\r\n        const t = typeof val;\r\n        if (\r\n          t === 'undefined' ||\r\n          t === 'null' ||\r\n          t === 'boolean' ||\r\n          t === 'string'\r\n        ) {\r\n          return true;\r\n        }\r\n        if (t === 'number') {\r\n          return isFinite(val);\r\n        }\r\n        if (t === 'function' || t !== 'object') {\r\n          return false;\r\n        }\r\n        if (Array.isArray(val)) {\r\n          return val.every(isValidArgument);\r\n        }\r\n        for (const k in val) {\r\n          if (typeof val[k] !== 'function' && !isValidArgument(val[k])) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      };\r\n\r\n      // Replacement allows normally non-JSON-convertible values to be\r\n      // seen.  There is ambiguity with string values, but in context,\r\n      // it should at least be a strong hint.\r\n      const replacer = (key, val) => {\r\n        const t = typeof val;\r\n        if (t === 'function') {\r\n          return '<<Function ' + val.name + '>>';\r\n        } else if (t === 'number' && !isFinite(val)) {\r\n          return '<<' + val.toString() + '>>';\r\n        } else {\r\n          return val;\r\n        }\r\n      };\r\n\r\n      // Note that JSON.stringify\r\n      invariant(\r\n        isValidArgument(params),\r\n        '%s is not usable as a native method argument',\r\n        JSON.stringify(params, replacer),\r\n      );\r\n\r\n      // The params object should not be mutated after being queued\r\n      deepFreezeAndThrowOnMutationInDev((params: any));\r\n    }\r\n    this._queue[PARAMS].push(params);\r\n\r\n    const now = Date.now();\r\n    if (\r\n      global.nativeFlushQueueImmediate &&\r\n      now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS\r\n    ) {\r\n      const queue = this._queue;\r\n      this._queue = [[], [], [], this._callID];\r\n      this._lastFlush = now;\r\n      global.nativeFlushQueueImmediate(queue);\r\n    }\r\n    Systrace.counterEvent('pending_js_to_native_queue', this._queue[0].length);\r\n    if (__DEV__ && this.__spy && isFinite(moduleID)) {\r\n      this.__spy({\r\n        type: TO_NATIVE,\r\n        module: this._remoteModuleTable[moduleID],\r\n        method: this._remoteMethodTable[moduleID][methodID],\r\n        args: params,\r\n      });\r\n    } else if (this.__spy) {\r\n      this.__spy({\r\n        type: TO_NATIVE,\r\n        module: moduleID + '',\r\n        method: methodID,\r\n        args: params,\r\n      });\r\n    }\r\n  }\r\n\r\n  createDebugLookup(\r\n    moduleID: number,\r\n    name: string,\r\n    methods: ?$ReadOnlyArray<string>,\r\n  ) {\r\n    if (__DEV__) {\r\n      this._remoteModuleTable[moduleID] = name;\r\n      this._remoteMethodTable[moduleID] = methods || [];\r\n    }\r\n  }\r\n\r\n  // For JSTimers to register its callback. Otherwise a circular dependency\r\n  // between modules is introduced. Note that only one callback may be\r\n  // registered at a time.\r\n  setImmediatesCallback(fn: () => void) {\r\n    this._immediatesCallback = fn;\r\n  }\r\n\r\n  /**\r\n   * Private methods\r\n   */\r\n\r\n  __guard(fn: () => void) {\r\n    if (this.__shouldPauseOnThrow()) {\r\n      fn();\r\n    } else {\r\n      try {\r\n        fn();\r\n      } catch (error) {\r\n        ErrorUtils.reportFatalError(error);\r\n      }\r\n    }\r\n  }\r\n\r\n  // MessageQueue installs a global handler to catch all exceptions where JS users can register their own behavior\r\n  // This handler makes all exceptions to be propagated from inside MessageQueue rather than by the VM at their origin\r\n  // This makes stacktraces to be placed at MessageQueue rather than at where they were launched\r\n  // The parameter DebuggerInternal.shouldPauseOnThrow is used to check before catching all exceptions and\r\n  // can be configured by the VM or any Inspector\r\n  __shouldPauseOnThrow(): boolean {\r\n    return (\r\n      // $FlowFixMe\r\n      typeof DebuggerInternal !== 'undefined' &&\r\n      DebuggerInternal.shouldPauseOnThrow === true // eslint-disable-line no-undef\r\n    );\r\n  }\r\n\r\n  __callImmediates() {\r\n    Systrace.beginEvent('JSTimers.callImmediates()');\r\n    if (this._immediatesCallback != null) {\r\n      this._immediatesCallback();\r\n    }\r\n    Systrace.endEvent();\r\n  }\r\n\r\n  __callFunction(module: string, method: string, args: any[]): void {\r\n    this._lastFlush = Date.now();\r\n    this._eventLoopStartTime = this._lastFlush;\r\n    if (__DEV__ || this.__spy) {\r\n      Systrace.beginEvent(`${module}.${method}(${stringifySafe(args)})`);\r\n    } else {\r\n      Systrace.beginEvent(`${module}.${method}(...)`);\r\n    }\r\n    if (this.__spy) {\r\n      this.__spy({type: TO_JS, module, method, args});\r\n    }\r\n    const moduleMethods = this.getCallableModule(module);\r\n    invariant(\r\n      !!moduleMethods,\r\n      'Module %s is not a registered callable module (calling %s)',\r\n      module,\r\n      method,\r\n    );\r\n    invariant(\r\n      !!moduleMethods[method],\r\n      'Method %s does not exist on module %s',\r\n      method,\r\n      module,\r\n    );\r\n    moduleMethods[method].apply(moduleMethods, args);\r\n    Systrace.endEvent();\r\n  }\r\n\r\n  __invokeCallback(cbID: number, args: any[]) {\r\n    this._lastFlush = Date.now();\r\n    this._eventLoopStartTime = this._lastFlush;\r\n\r\n    // The rightmost bit of cbID indicates fail (0) or success (1), the other bits are the callID shifted left.\r\n    // eslint-disable-next-line no-bitwise\r\n    const callID = cbID >>> 1;\r\n    // eslint-disable-next-line no-bitwise\r\n    const isSuccess = cbID & 1;\r\n    const callback = isSuccess\r\n      ? this._successCallbacks.get(callID)\r\n      : this._failureCallbacks.get(callID);\r\n\r\n    if (__DEV__) {\r\n      const debug = this._debugInfo[callID];\r\n      const module = debug && this._remoteModuleTable[debug[0]];\r\n      const method = debug && this._remoteMethodTable[debug[0]][debug[1]];\r\n      invariant(\r\n        callback,\r\n        `No callback found with cbID ${cbID} and callID ${callID} for ` +\r\n          (method\r\n            ? ` ${module}.${method} - most likely the callback was already invoked`\r\n            : `module ${module || '<unknown>'}`) +\r\n          `. Args: '${stringifySafe(args)}'`,\r\n      );\r\n      const profileName = debug\r\n        ? '<callback for ' + module + '.' + method + '>'\r\n        : cbID;\r\n      if (callback && this.__spy) {\r\n        this.__spy({type: TO_JS, module: null, method: profileName, args});\r\n      }\r\n      Systrace.beginEvent(\r\n        `MessageQueue.invokeCallback(${profileName}, ${stringifySafe(args)})`,\r\n      );\r\n    }\r\n\r\n    if (!callback) {\r\n      return;\r\n    }\r\n\r\n    this._successCallbacks.delete(callID);\r\n    this._failureCallbacks.delete(callID);\r\n    callback(...args);\r\n\r\n    if (__DEV__) {\r\n      Systrace.endEvent();\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = MessageQueue;\r\n"]},"metadata":{},"sourceType":"script"}