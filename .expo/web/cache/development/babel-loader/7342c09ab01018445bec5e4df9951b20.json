{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"G:\\\\wamp64\\\\www\\\\projectWellbeingApp\\\\app\\\\screens\\\\LoginScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport AppButton from \"../components/AppButton\";\nimport AppTextInput from \"../components/AppTextInput\";\nimport Screen from \"../components/screen\";\nimport AppText from \"../components/AppText\";\nimport colors from \"../config/colors\";\nimport userApi from \"../api/user\";\nimport { useContext } from \"react\";\nimport AuthContext from \"../AuthContext/context\";\nimport authStorage from \"../AuthContext/authStorage\";\nimport session from \"../cache/userSession\";\nvar validationSchema = Yup.object().shape({\n  email: Yup.string().required().email().label(\"Email\"),\n  password: Yup.string().required().label(\"Password\")\n});\n\nfunction LoginScreen(props) {\n  var _this = this;\n\n  var authContext = useContext(AuthContext);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loginFailed = _useState2[0],\n      setLoginFailed = _useState2[1];\n\n  var handleSubmit = function handleSubmit(_ref) {\n    var email, password, result, user;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            email = _ref.email, password = _ref.password;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(userApi.login(email, password));\n\n          case 3:\n            result = _context.sent;\n\n            if (result.ok) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", setLoginFailed(true));\n\n          case 6:\n            setLoginFailed(false);\n            user = result.data;\n            authContext.setUser(user);\n            authStorage.storeUser(JSON.stringify(user));\n            session.setEmail(email);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Screen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.backgroundLogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.introContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }, React.createElement(Image, {\n    style: styles.logo,\n    source: require(\"../../assets/nbcc.png\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }), React.createElement(Text, {\n    style: styles.introText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, \"Login for Staff\")), React.createElement(Formik, {\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    onSubmit: handleSubmit,\n    validationSchema: validationSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, function (_ref2) {\n    var handleChange = _ref2.handleChange,\n        handleSubmit = _ref2.handleSubmit,\n        errors = _ref2.errors,\n        setFieldTouched = _ref2.setFieldTouched,\n        touched = _ref2.touched;\n    return React.createElement(React.Fragment, null, React.createElement(AppText, {\n      style: styles.error,\n      visible: loginFailed,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }\n    }, \"Invalid Email or Password\"), React.createElement(AppTextInput, {\n      placeholder: \"Enter Email\",\n      icon: \"email\",\n      autoCapitalize: \"none\",\n      autoCorrect: false,\n      keyboardType: \"email-address\",\n      textContentType: \"emailAddress\",\n      onBlur: function onBlur() {\n        return setFieldTouched(\"email\");\n      },\n      onChangeText: handleChange(\"email\"),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }\n    }), React.createElement(AppText, {\n      style: styles.error,\n      visible: touched.email,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }, errors.email), React.createElement(AppTextInput, {\n      placeholder: \"Enter Password\",\n      icon: \"lock\",\n      secureTextEntry: true,\n      textContentType: \"password\",\n      onChangeText: handleChange(\"password\"),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }), React.createElement(AppText, {\n      style: styles.error,\n      visible: touched.password,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }, errors.password), React.createElement(AppButton, {\n      styles: styles.loginButton,\n      onPress: handleSubmit,\n      text: \"Login\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }));\n  }))));\n}\n\nvar styles = StyleSheet.create({\n  backgroundLogin: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: \"#a1d8e0\"\n  },\n  container: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 20,\n    backgroundColor: \"white\"\n  },\n  introContainer: {\n    marginBottom: 25,\n    backgroundColor: \"white\"\n  },\n  introText: {\n    fontWeight: \"bold\",\n    fontSize: 25,\n    textAlign: \"center\"\n  },\n  error: {\n    color: colors.error,\n    fontSize: 10,\n    alignSelf: \"flex-start\",\n    marginLeft: 10\n  },\n  loginButton: {\n    flex: 1,\n    marginVertical: 30\n  },\n  logo: {\n    bottom: 60,\n    backgroundColor: \"white\",\n    alignSelf: 'stretch'\n  }\n});\nexport default LoginScreen;","map":{"version":3,"sources":["G:/wamp64/www/projectWellbeingApp/app/screens/LoginScreen.js"],"names":["React","useState","AsyncStorage","Formik","Yup","AppButton","AppTextInput","Screen","AppText","colors","userApi","useContext","AuthContext","authStorage","session","validationSchema","object","shape","email","string","required","label","password","LoginScreen","props","authContext","loginFailed","setLoginFailed","handleSubmit","login","result","ok","user","data","setUser","storeUser","JSON","stringify","setEmail","styles","backgroundLogin","container","introContainer","logo","require","introText","handleChange","errors","setFieldTouched","touched","error","loginButton","StyleSheet","create","flex","alignItems","justifyContent","backgroundColor","padding","marginBottom","fontWeight","fontSize","textAlign","color","alignSelf","marginLeft","marginVertical","bottom"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { View, StyleSheet, Text, Image, AsyncStorage } from \"react-native\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport AppButton from \"../components/AppButton\";\r\nimport AppTextInput from \"../components/AppTextInput\";\r\nimport Screen from \"../components/screen\";\r\nimport AppText from \"../components/AppText\";\r\nimport colors from \"../config/colors\";\r\nimport userApi from \"../api/user\";\r\nimport { useContext } from \"react\";\r\nimport AuthContext from \"../AuthContext/context\";\r\nimport authStorage from \"../AuthContext/authStorage\";\r\nimport session from \"../cache/userSession\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  email: Yup.string().required().email().label(\"Email\"),\r\n  password: Yup.string().required().label(\"Password\"),\r\n});\r\n//LOGIN screen LOGIC\r\nfunction LoginScreen(props) {\r\n  const authContext = useContext(AuthContext);\r\n  const [loginFailed, setLoginFailed] = useState(false);\r\n\r\n  //check the email\r\n  const handleSubmit = async ({ email, password }) => {\r\n    const result = await userApi.login(email, password);\r\n    if (!result.ok) {\r\n      return setLoginFailed(true);\r\n    }\r\n    setLoginFailed(false);\r\n    const user = result.data;\r\n    authContext.setUser(user);\r\n    authStorage.storeUser(JSON.stringify(user)); //set the user to secure storage\r\n    session.setEmail(email);\r\n  };\r\n\r\n  return (\r\n    <Screen>\r\n      <View style={styles.backgroundLogin}>\r\n        <View style={styles.container}>\r\n          <View style={styles.introContainer}>\r\n            <Image style={styles.logo} source={require(\"../../assets/nbcc.png\")} />\r\n            <Text style={styles.introText}>\r\n              Login for Staff\r\n            </Text>\r\n          </View>\r\n          <Formik\r\n            initialValues={{ email: \"\", password: \"\" }}\r\n            onSubmit={handleSubmit}\r\n            validationSchema={validationSchema}\r\n          >\r\n            {({\r\n              handleChange,\r\n              handleSubmit,\r\n              errors,\r\n              setFieldTouched,\r\n              touched,\r\n            }) => (\r\n              <>\r\n                <AppText style={styles.error} visible={loginFailed}>\r\n                  {\"Invalid Email or Password\"}\r\n                </AppText>\r\n                <AppTextInput\r\n                  placeholder=\"Enter Email\"\r\n                  icon={\"email\"}\r\n                  autoCapitalize=\"none\"\r\n                  autoCorrect={false}\r\n                  keyboardType=\"email-address\"\r\n                  textContentType=\"emailAddress\"\r\n                  onBlur={() => setFieldTouched(\"email\")}\r\n                  onChangeText={handleChange(\"email\")}\r\n                />\r\n                <AppText style={styles.error} visible={touched.email}>\r\n                  {errors.email}\r\n                </AppText>\r\n                <AppTextInput\r\n                  placeholder=\"Enter Password\"\r\n                  icon={\"lock\"}\r\n                  secureTextEntry\r\n                  textContentType=\"password\"\r\n                  onChangeText={handleChange(\"password\")}\r\n                />\r\n                <AppText style={styles.error} visible={touched.password}>\r\n                  {errors.password}\r\n                </AppText>\r\n                <AppButton\r\n                  styles={styles.loginButton}\r\n                  onPress={handleSubmit}\r\n                  text={\"Login\"}\r\n                ></AppButton>\r\n              </>\r\n            )}\r\n          </Formik>\r\n        </View>\r\n      </View>\r\n    </Screen>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  backgroundLogin: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    backgroundColor: \"#a1d8e0\"\r\n  },\r\n  container: {\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    padding: 20,\r\n    backgroundColor: \"white\"\r\n  },\r\n  introContainer: {\r\n    marginBottom: 25,\r\n    backgroundColor: \"white\"\r\n  },\r\n  introText: {\r\n    fontWeight: \"bold\",\r\n    fontSize: 25,\r\n    textAlign: \"center\"\r\n  },\r\n  error: {\r\n    color: colors.error,\r\n    fontSize: 10,\r\n    alignSelf: \"flex-start\",\r\n    marginLeft: 10,\r\n  },\r\n  loginButton: {\r\n    flex: 1,\r\n    marginVertical: 30,\r\n  },\r\n  logo: {\r\n    bottom: 60,\r\n    backgroundColor: \"white\",\r\n    alignSelf: 'stretch'\r\n  },\r\n});\r\n\r\nexport default LoginScreen;\r\n"]},"metadata":{},"sourceType":"module"}