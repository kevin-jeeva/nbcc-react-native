{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"G:\\\\wamp64\\\\www\\\\projectWellbeingApp\\\\App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport AppLoading from \"expo-app-loading\";\nimport AuthNavigator from \"./app/navigation/AuthNavigator\";\nimport AppNavigator from \"./app/navigation/AppNavigator\";\nimport AuthContext from \"./app/AuthContext/context\";\nimport navigationTheme from \"./app/navigation/navigationTheme\";\nimport ContentScreen from \"./app/screens/ContentScreen\";\nimport DisplayContent from \"./app/screens/DisplayContent\";\nimport authStorage from \"./app/AuthContext/authStorage\";\nimport Dashboard from \"./app/screens/Dashboard\";\nimport { cos } from \"react-native-reanimated\";\nimport { get } from \"react-native/Libraries/Utilities/PixelRatio\";\nimport ContactUsScreen from \"./app/screens/ContactUsScreen.js\";\nexport default function App() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var getUser = function getUser() {\n    var getUserInfo;\n    return _regeneratorRuntime.async(function getUser$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(authStorage.restoreUser());\n\n          case 2:\n            getUserInfo = _context.sent;\n            setUser(JSON.parse(getUserInfo));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (!loading) return React.createElement(AppLoading, {\n    startAsync: getUser,\n    onFinish: function onFinish() {\n      return setLoading(true);\n    },\n    onError: console.warn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  });\n  return React.createElement(AuthContext.Provider, {\n    value: {\n      user: user,\n      setUser: setUser\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, React.createElement(NavigationContainer, {\n    theme: navigationTheme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, user ? React.createElement(AppNavigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }) : React.createElement(AuthNavigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 36\n    }\n  })));\n}","map":{"version":3,"sources":["G:/wamp64/www/projectWellbeingApp/App.js"],"names":["React","useEffect","useState","NavigationContainer","AppLoading","AuthNavigator","AppNavigator","AuthContext","navigationTheme","ContentScreen","DisplayContent","authStorage","Dashboard","cos","get","ContactUsScreen","App","user","setUser","loading","setLoading","getUser","restoreUser","getUserInfo","JSON","parse","console","warn"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AAEA,OAAOC,aAAP;AACA,OAAOC,YAAP;AACA,OAAOC,WAAP;AACA,OAAOC,eAAP;AACA,OAAOC,aAAP;AACA,OAAOC,cAAP;AACA,OAAOC,WAAP;AACA,OAAOC,SAAP;AACA,SAASC,GAAT,QAAoB,yBAApB;AACA,SAASC,GAAT,QAAoB,6CAApB;AACA,OAAOC,eAAP;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA,kBACJd,QAAQ,EADJ;AAAA;AAAA,MACrBe,IADqB;AAAA,MACfC,OADe;;AAAA,mBAEEhB,QAAQ,CAAC,KAAD,CAFV;AAAA;AAAA,MAErBiB,OAFqB;AAAA,MAEZC,UAFY;;AAI5B,MAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACYV,WAAW,CAACW,WAAZ,EADZ;;AAAA;AACRC,YAAAA,WADQ;AAEdL,YAAAA,OAAO,CAACM,IAAI,CAACC,KAAL,CAAWF,WAAX,CAAD,CAAP;;AAFc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAQA,MAAI,CAACJ,OAAL,EACE,OACE,oBAAC,UAAD;AACE,IAAA,UAAU,EAAEE,OADd;AAEE,IAAA,QAAQ,EAAE;AAAA,aAAMD,UAAU,CAAC,IAAD,CAAhB;AAAA,KAFZ;AAGE,IAAA,OAAO,EAAEM,OAAO,CAACC,IAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAOF,SAIE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEV,MAAAA,IAAI,EAAJA,IAAF;AAAQC,MAAAA,OAAO,EAAPA;AAAR,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,mBAAD;AAAqB,IAAA,KAAK,EAAEV,eAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGS,IAAI,GAAG,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAsB,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD7B,CADF,CAJF;AAUD","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport AppLoading from \"expo-app-loading\";\r\n\r\nimport AuthNavigator from \"./app/navigation/AuthNavigator\";\r\nimport AppNavigator from \"./app/navigation/AppNavigator\";\r\nimport AuthContext from \"./app/AuthContext/context\";\r\nimport navigationTheme from \"./app/navigation/navigationTheme\";\r\nimport ContentScreen from \"./app/screens/ContentScreen\";\r\nimport DisplayContent from \"./app/screens/DisplayContent\";\r\nimport authStorage from \"./app/AuthContext/authStorage\";\r\nimport Dashboard from \"./app/screens/Dashboard\";\r\nimport { cos } from \"react-native-reanimated\";\r\nimport { get } from \"react-native/Libraries/Utilities/PixelRatio\";\r\nimport ContactUsScreen from \"./app/screens/ContactUsScreen.js\";\r\n\r\nexport default function App() {\r\n  const [user, setUser] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const getUser = async () => {\r\n    const getUserInfo = await authStorage.restoreUser();\r\n    setUser(JSON.parse(getUserInfo));\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   getUser();\r\n  // }, []);\r\n  if (!loading)\r\n    return (\r\n      <AppLoading\r\n        startAsync={getUser}\r\n        onFinish={() => setLoading(true)}\r\n        onError={console.warn}\r\n      />\r\n    );\r\n  return (\r\n    // <Dashboard />\r\n    // <ContactUsScreen />\r\n    //<ContentScreen />\r\n    <AuthContext.Provider value={{ user, setUser }}>\r\n      <NavigationContainer theme={navigationTheme}>\r\n        {user ? <AppNavigator /> : <AuthNavigator />}\r\n      </NavigationContainer>\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}