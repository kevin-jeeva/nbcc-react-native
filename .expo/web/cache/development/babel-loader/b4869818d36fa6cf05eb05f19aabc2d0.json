{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar EventSubscription = require(\"./EventSubscription\");\n\nvar EmitterSubscription = function (_EventSubscription) {\n  _inherits(EmitterSubscription, _EventSubscription);\n\n  var _super = _createSuper(EmitterSubscription);\n\n  function EmitterSubscription(emitter, subscriber, listener, context) {\n    var _this;\n\n    _classCallCheck(this, EmitterSubscription);\n\n    _this = _super.call(this, subscriber);\n    _this.emitter = emitter;\n    _this.listener = listener;\n    _this.context = context;\n    return _this;\n  }\n\n  _createClass(EmitterSubscription, [{\n    key: \"remove\",\n    value: function remove() {\n      this.emitter.removeSubscription(this);\n    }\n  }]);\n\n  return EmitterSubscription;\n}(EventSubscription);\n\nmodule.exports = EmitterSubscription;","map":{"version":3,"sources":["C:/wamp64/nbcc-staff-react-native/node_modules/react-native/Libraries/vendor/emitter/EmitterSubscription.js"],"names":["EventSubscription","require","EmitterSubscription","emitter","subscriber","listener","context","removeSubscription","module","exports"],"mappings":"AAUA;;;;;;;;;;;;;;;;AAEA,IAAMA,iBAAiB,GAAGC,OAAO,uBAAjC;;IAQMC,mB;;;;;AAeJ,+BACEC,OADF,EAEEC,UAFF,EAGEC,QAHF,EAIEC,OAJF,EAKE;AAAA;;AAAA;;AACA,8BAAMF,UAAN;AACA,UAAKD,OAAL,GAAeA,OAAf;AACA,UAAKE,QAAL,GAAgBA,QAAhB;AACA,UAAKC,OAAL,GAAeA,OAAf;AAJA;AAKD;;;;WAQD,kBAAS;AACP,WAAKH,OAAL,CAAaI,kBAAb,CAAgC,IAAhC;AACD;;;;EAnC+BP,iB;;AAsClCQ,MAAM,CAACC,OAAP,GAAiBP,mBAAjB","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n */\r\n\r\n'use strict';\r\n\r\nconst EventSubscription = require('./EventSubscription');\r\n\r\nimport type EventEmitter from './EventEmitter';\r\nimport type EventSubscriptionVendor from './EventSubscriptionVendor';\r\n\r\n/**\r\n * EmitterSubscription represents a subscription with listener and context data.\r\n */\r\nclass EmitterSubscription extends EventSubscription {\r\n  emitter: EventEmitter;\r\n  listener: Function;\r\n  context: ?Object;\r\n\r\n  /**\r\n   * @param {EventEmitter} emitter - The event emitter that registered this\r\n   *   subscription\r\n   * @param {EventSubscriptionVendor} subscriber - The subscriber that controls\r\n   *   this subscription\r\n   * @param {function} listener - Function to invoke when the specified event is\r\n   *   emitted\r\n   * @param {*} context - Optional context object to use when invoking the\r\n   *   listener\r\n   */\r\n  constructor(\r\n    emitter: EventEmitter,\r\n    subscriber: EventSubscriptionVendor,\r\n    listener: Function,\r\n    context: ?Object,\r\n  ) {\r\n    super(subscriber);\r\n    this.emitter = emitter;\r\n    this.listener = listener;\r\n    this.context = context;\r\n  }\r\n\r\n  /**\r\n   * Removes this subscription from the emitter that registered it.\r\n   * Note: we're overriding the `remove()` method of EventSubscription here\r\n   * but deliberately not calling `super.remove()` as the responsibility\r\n   * for removing the subscription lies with the EventEmitter.\r\n   */\r\n  remove() {\r\n    this.emitter.removeSubscription(this);\r\n  }\r\n}\r\n\r\nmodule.exports = EmitterSubscription;\r\n"]},"metadata":{},"sourceType":"script"}