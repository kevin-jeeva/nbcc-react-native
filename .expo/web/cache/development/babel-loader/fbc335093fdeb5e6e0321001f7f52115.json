{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar invariant = require('invariant');\n\nvar EventSubscriptionVendor = function () {\n  function EventSubscriptionVendor() {\n    _classCallCheck(this, EventSubscriptionVendor);\n\n    this._subscriptionsForType = {};\n    this._currentSubscription = null;\n  }\n\n  _createClass(EventSubscriptionVendor, [{\n    key: \"addSubscription\",\n    value: function addSubscription(eventType, subscription) {\n      invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\n\n      if (!this._subscriptionsForType[eventType]) {\n        this._subscriptionsForType[eventType] = [];\n      }\n\n      var key = this._subscriptionsForType[eventType].length;\n\n      this._subscriptionsForType[eventType].push(subscription);\n\n      subscription.eventType = eventType;\n      subscription.key = key;\n      return subscription;\n    }\n  }, {\n    key: \"removeAllSubscriptions\",\n    value: function removeAllSubscriptions(eventType) {\n      if (eventType === undefined) {\n        this._subscriptionsForType = {};\n      } else {\n        delete this._subscriptionsForType[eventType];\n      }\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(subscription) {\n      var eventType = subscription.eventType;\n      var key = subscription.key;\n      var subscriptionsForType = this._subscriptionsForType[eventType];\n\n      if (subscriptionsForType) {\n        delete subscriptionsForType[key];\n      }\n    }\n  }, {\n    key: \"getSubscriptionsForType\",\n    value: function getSubscriptionsForType(eventType) {\n      return this._subscriptionsForType[eventType];\n    }\n  }]);\n\n  return EventSubscriptionVendor;\n}();\n\nmodule.exports = EventSubscriptionVendor;","map":{"version":3,"sources":["C:/wamp64/nbcc-staff-react-native/node_modules/react-native/Libraries/vendor/emitter/EventSubscriptionVendor.js"],"names":["invariant","require","EventSubscriptionVendor","_subscriptionsForType","_currentSubscription","eventType","subscription","subscriber","key","length","push","undefined","subscriptionsForType","module","exports"],"mappings":"AAUA;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;IAQMC,uB;AAIJ,qCAAc;AAAA;;AACZ,SAAKC,qBAAL,GAA6B,EAA7B;AACA,SAAKC,oBAAL,GAA4B,IAA5B;AACD;;;;WAQD,yBACEC,SADF,EAEEC,YAFF,EAGqB;AACnBN,MAAAA,SAAS,CACPM,YAAY,CAACC,UAAb,KAA4B,IADrB,EAEP,wDAFO,CAAT;;AAIA,UAAI,CAAC,KAAKJ,qBAAL,CAA2BE,SAA3B,CAAL,EAA4C;AAC1C,aAAKF,qBAAL,CAA2BE,SAA3B,IAAwC,EAAxC;AACD;;AACD,UAAMG,GAAG,GAAG,KAAKL,qBAAL,CAA2BE,SAA3B,EAAsCI,MAAlD;;AACA,WAAKN,qBAAL,CAA2BE,SAA3B,EAAsCK,IAAtC,CAA2CJ,YAA3C;;AACAA,MAAAA,YAAY,CAACD,SAAb,GAAyBA,SAAzB;AACAC,MAAAA,YAAY,CAACE,GAAb,GAAmBA,GAAnB;AACA,aAAOF,YAAP;AACD;;;WAQD,gCAAuBD,SAAvB,EAA2C;AACzC,UAAIA,SAAS,KAAKM,SAAlB,EAA6B;AAC3B,aAAKR,qBAAL,GAA6B,EAA7B;AACD,OAFD,MAEO;AACL,eAAO,KAAKA,qBAAL,CAA2BE,SAA3B,CAAP;AACD;AACF;;;WAQD,4BAAmBC,YAAnB,EAAyC;AACvC,UAAMD,SAAS,GAAGC,YAAY,CAACD,SAA/B;AACA,UAAMG,GAAG,GAAGF,YAAY,CAACE,GAAzB;AAEA,UAAMI,oBAAoB,GAAG,KAAKT,qBAAL,CAA2BE,SAA3B,CAA7B;;AACA,UAAIO,oBAAJ,EAA0B;AACxB,eAAOA,oBAAoB,CAACJ,GAAD,CAA3B;AACD;AACF;;;WAcD,iCAAwBH,SAAxB,EAAiE;AAC/D,aAAO,KAAKF,qBAAL,CAA2BE,SAA3B,CAAP;AACD;;;;;;AAGHQ,MAAM,CAACC,OAAP,GAAiBZ,uBAAjB","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n */\r\n\r\n'use strict';\r\n\r\nconst invariant = require('invariant');\r\n\r\nimport type EventSubscription from './EventSubscription';\r\n\r\n/**\r\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\r\n * subscribed to a particular event type.\r\n */\r\nclass EventSubscriptionVendor {\r\n  _subscriptionsForType: Object;\r\n  _currentSubscription: ?EventSubscription;\r\n\r\n  constructor() {\r\n    this._subscriptionsForType = {};\r\n    this._currentSubscription = null;\r\n  }\r\n\r\n  /**\r\n   * Adds a subscription keyed by an event type.\r\n   *\r\n   * @param {string} eventType\r\n   * @param {EventSubscription} subscription\r\n   */\r\n  addSubscription(\r\n    eventType: string,\r\n    subscription: EventSubscription,\r\n  ): EventSubscription {\r\n    invariant(\r\n      subscription.subscriber === this,\r\n      'The subscriber of the subscription is incorrectly set.',\r\n    );\r\n    if (!this._subscriptionsForType[eventType]) {\r\n      this._subscriptionsForType[eventType] = [];\r\n    }\r\n    const key = this._subscriptionsForType[eventType].length;\r\n    this._subscriptionsForType[eventType].push(subscription);\r\n    subscription.eventType = eventType;\r\n    subscription.key = key;\r\n    return subscription;\r\n  }\r\n\r\n  /**\r\n   * Removes a bulk set of the subscriptions.\r\n   *\r\n   * @param {?string} eventType - Optional name of the event type whose\r\n   *   registered supscriptions to remove, if null remove all subscriptions.\r\n   */\r\n  removeAllSubscriptions(eventType: ?string) {\r\n    if (eventType === undefined) {\r\n      this._subscriptionsForType = {};\r\n    } else {\r\n      delete this._subscriptionsForType[eventType];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes a specific subscription. Instead of calling this function, call\r\n   * `subscription.remove()` directly.\r\n   *\r\n   * @param {object} subscription\r\n   */\r\n  removeSubscription(subscription: Object) {\r\n    const eventType = subscription.eventType;\r\n    const key = subscription.key;\r\n\r\n    const subscriptionsForType = this._subscriptionsForType[eventType];\r\n    if (subscriptionsForType) {\r\n      delete subscriptionsForType[key];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the array of subscriptions that are currently registered for the\r\n   * given event type.\r\n   *\r\n   * Note: This array can be potentially sparse as subscriptions are deleted\r\n   * from it when they are removed.\r\n   *\r\n   * TODO: This returns a nullable array. wat?\r\n   *\r\n   * @param {string} eventType\r\n   * @returns {?array}\r\n   */\r\n  getSubscriptionsForType(eventType: string): ?[EventSubscription] {\r\n    return this._subscriptionsForType[eventType];\r\n  }\r\n}\r\n\r\nmodule.exports = EventSubscriptionVendor;\r\n"]},"metadata":{},"sourceType":"script"}